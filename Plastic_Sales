plastic_sales<- read.csv(file.choose())

plot(plastic_sales$Sales,type = "l")

##creating 11 dummy variables 
x<- data.frame(outer(rep(month.abb,length = 60),month.abb,"==")+0)
View(x)

colnames(x)<- month.abb
View(x)

trakdata<- cbind(plastic_sales,x)
View(trakdata)
trakdata ["t"]<- 1:60

##adding log of sales column
trakdata["log_sales"]<- log(trakdata["Sales"])

trakdata["t_square"]<- trakdata["t"]*trakdata["t"]
View(trakdata)

##Data Parition 
train<- trakdata[1:48,]
test<- trakdata[49:60,]

#####  Linear Model  #### 

linear_model<- lm(Sales~t,data = train)
summary(linear_model)
linear_pred<- data.frame(predict(linear_model,interval= 'predict',newdata = test))
rmse_linear<- sqrt(mean((test$Sales-linear_pred$fit)^2,na.rm = T))
rmse_linear      ### 260.9378

#### Exponential Data ####

expo_model<- lm(log_sales ~ t, data = train)
summary(expo_model)
expo_pred<- data.frame(predict(expo_model,interval ='predict',newdata = test))
rmse_expo<- sqrt(mean((test$Sales-exp(expo_pred$fit))^2,na.rm = T))
rmse_expo       ###268.6938

####  Quadratic Data ####

quad_model<- lm(Sales~t+t_square,data = train)
summary(quad_model)
quad_pred<- data.frame(predict(quad_model,interval = 'predict', newdata = test))
rmse_quad<- sqrt(mean((test$Sales-quad_pred$fit)^2,na.rm = T))
rmse_quad      ###297.4067

####  Additive Seasonbility  ####

sea_add_model<- lm(Sales~Jan+Feb+Mar+Apr+May+Jun+Jul+Aug+Sep+Oct+Nov,data = train)
summary(sea_add_model)
sea_add_pred<- data.frame(predict(sea_add_model,interval = 'predict',newdata = test))
rmse_sea_add<- sqrt(mean((test$Sales-sea_add_pred$fit)^2,na.rm = T))
rmse_sea_add   ###235.6027

####  Additive Seasobility wid Linear  ####

add_linear_model<- lm(Sales~t+Jan+Feb+Mar+Apr+May+Jun+Jul+Aug+Sep+Oct+Nov, data = train)
summary(add_linear_model)
add_linear_pred<- data.frame(predict(add_linear_model,interval = 'predict',newdata = test))
rmse_add_linear<- sqrt(mean((test$Sales-add_linear_pred$fit)^2,na.rm = T))
rmse_add_linear    ## 135.55

####  Additve Seasonbility wid Quadratic ####

add_quad_model<- lm(Sales~t+t_square+Jan+Feb+Mar+Apr+May+Jun+Jul+Aug+Sep+Oct+Nov,data = train)
summary(add_quad_model)
add_quad_pred<- data.frame(predict(add_quad_model,interval = 'predict',newdata = test))
rmse_add_quad<- sqrt(mean((test$Sales-add_quad_pred$fit)^2,na.rm = T))
rmse_add_quad    ###218.1939

####  Multiplicativ Seasonbility  ####

multi_sea_model<- lm(log_sales~Jan+Feb+Mar+Apr+May+Jun+Jul+Aug+Sep+Oct+Nov,data = train)
summary(multi_sea_model)
multi_sea_pred<- data.frame(predict(multi_sea_model,interval = 'predict',newdata = test))
rmse_multi_sea<- sqrt(mean((test$Sales-exp(multi_sea_pred$fit))^2,na.rm = T))
rmse_multi_sea   ###239.6543 

####   Multi seasonability wid Linear ###

multi_sea_linear_model<- lm(log_sales~t+t+Jan+Feb+Mar+Apr+May+Jun+Jul+Aug+Sep+Oct+Nov,data = train)
summary(multi_sea_linear_model)
multi_sea_linear_pred<- data.frame(predict(multi_sea_linear_model,interval= 'predict',newdata=test))
rmse_multi_sea_linear<- sqrt(mean((test$Sales-exp(multi_sea_linear_pred$fit))^2,na.rm = T))
rmse_multi_sea_linear  ###160.6833

table_rmse<- data.frame('Model'=c("rmse_linear","rmse_expo","rmse_quad","rmse_sea_add","rmse_add_linear","rmse_add_quad","rmse_multi_sea","rmse_multi_sea_linear"),RMSE = c(rmse_linear,rmse_expo,rmse_quad,rmse_sea_add,rmse_add_linear,rmse_add_quad,rmse_multi_sea,rmse_multi_sea_linear))
View(table_rmse)
colnames(table_rmse)<- c("Model","RMSE")
View(table_rmse)

##### creating new model as minimum RMSE value #####
new_model<- lm(Sales~t+Jan+Feb+Mar+Apr+May+Jun+Jul+Aug+Sep+Oct+Nov, data = train)

##Getting Residual ##
resid<- residuals(new_model)
resid[1:10]
windows()
acf(resid,lag.max=10)

# By principle or parcimony we will consider lag-1 as we have so
#many Significant lags
#building Autoreggressive model on residuals consider lag-2
k<-arima(resid,order=c(2,0,0))

acf(k$residuals,lag.max=15)
pred_res<- predict(arima(k$residuals,order=c(2,0,0)),n.ahead=120)
str(pred_res)                  
pred_res$pred
acf(k$residuals)
write.csv(trakdata,file="plastic_track.csv",col.names = F,row.names = F)
